package permtest

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
)

// WriteFile tests if the file given is writable. The intent is to determine
// your ability to do an os.Create() on the given path.
func WriteFile(path string) (string, error) {
	return writable(path, true)
}

// WriteDir tests your ability to create a directory structure. The given path
// is traversed from deepest upward to determine if there are any directories
// with permissions which would restrict you from doing an os.MkdirAll().
func WriteDir(path string) (string, error) {
	return writable(path, false)
}

// writable determines if it is possible to write to the file or directory
// indicated by <path>.
//
// This function returns two values: The last path which was write-tested, and
// an error (or nil). Since the function recurses, having the last tested path
// returned can be helpful in determining root cause on where access was
// actually denied.
func writable(path string, isFile bool) (string, error) {
	fi, err := os.Stat(path)
	if err != nil {
		if os.IsNotExist(err) {
			// If the path didn't exist, and we are testing for file
			// permissions, try the immediate parent dir only.
			if isFile {
				return path, writeTempFile(filepath.Dir(path))
			}
			// If we are looking for a directory, then traverse the structure
			// until a writable dir or error is encountered.
			return writable(filepath.Dir(path), false)
		}
		return path, err
	}

	if fi.Mode().IsDir() {
		// If we are looking for a file but found a directory, this can't be
		// right, so throw an error.
		if isFile {
			return path, fmt.Errorf("%s: is a directory", path)
		}
		return path, writeTempFile(path)
	}

	if err := fileCanWrite(path); err != nil {
		return path, err
	}

	return path, nil
}

// fileCanWrite is used to test the writability of an existing file. This simply
// returns the error, or nil, which would be generated by attempting to acquire
// a file handle on the given path.
func fileCanWrite(path string) error {
	fh, err := os.OpenFile(path, os.O_APPEND, 0666)
	if err != nil {
		return err
	}
	defer fh.Close()
	return nil
}

// writeTempFile will attempt to write a temporary file into a directory. This
// determines beyond any shred of doubt whether or not the user is able to write
// a file to a given path. The file will be automatically deleted as soon as
// this method returns, and the file should have a unique, random name so as to
// not interfere with any existing content.
func writeTempFile(dir string) error {
	fh, err := ioutil.TempFile(dir, ".permtest-")
	if err != nil {
		return err
	}
	defer fh.Close()
	defer os.Remove(fh.Name())
	return nil
}
